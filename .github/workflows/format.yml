name: Format Check

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        id: format_check
        run: |
          # Turn off automatic exit on error
          set +e
          
          # Run the format check and capture the output
          cargo fmt --all -- --check > format_output.txt 2>&1
          FORMAT_EXIT_CODE=$?
          
          # Turn automatic exit on error back on
          set -e
          
          # Store the exit code for later steps
          echo "format_exit_code=$FORMAT_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Report results
          if [ $FORMAT_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Formatting issues found:"
            cat format_output.txt
            # Create a flag to indicate formatting issues were found
            echo "has_format_issues=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Code formatting looks good!"
            echo "has_format_issues=false" >> $GITHUB_OUTPUT
          fi
          
          # Make sure we let the workflow continue to comment on PR
          exit 0

      - name: Comment PR with format issues
        if: github.event_name == 'pull_request' && steps.format_check.outputs.has_format_issues == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Explicitly check if the file exists first
            const fs = require('fs');
            
            if (!fs.existsSync('format_output.txt')) {
              console.log('Warning: format_output.txt does not exist');
              return;
            }
            
            try {
              // Read the format output
              const output = fs.readFileSync('format_output.txt', 'utf8');
            
              // Create a more detailed comment with instructions
              const comment = `## ❌ Format Check Failed
            
            Your PR has code formatting issues. Please run \`cargo fmt\` locally to fix them.
            
            ### Format Output:
            \`\`\`
            ${output}
            \`\`\`
            
            ### How to fix:
            1. Run \`cargo fmt\` in your local repository
            2. Commit and push the changes
            3. The CI will run again and should pass this check
            `;
            
              // Post the comment on the PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            
              console.log('Successfully posted format issues comment to PR');
            } catch (error) {
              console.error('Error posting format issues comment:', error);
            }

      - name: Determine overall success
        if: always()
        run: |
          FORMAT_EXIT_CODE="${{ steps.format_check.outputs.format_exit_code }}"
          
          echo "Format exit code: $FORMAT_EXIT_CODE"
          
          if [[ "$FORMAT_EXIT_CODE" != "0" && "$FORMAT_EXIT_CODE" != "" ]]; then
            echo "::error::Code formatting issues found. Run 'cargo fmt' locally to fix."
            exit 1
          else
            echo "::notice::Format check completed successfully."
            exit 0
          fi 