name: Clippy Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate Clippy report
        run: |
          # Run clippy WITHOUT -D warnings flag to only fail on errors, not warnings
          cargo clippy --all-targets --all-features > clippy_output.txt 2>&1
          CLIPPY_EXIT_CODE=$?
          
          # Format the output to be more readable
          echo "## Clippy Report" > clippy_summary.md
          echo '```' >> clippy_summary.md
          
          # Save original output for context
          cat clippy_output.txt >> clippy_full_report.txt
          
          # Extract error and warning lines and strip ANSI color codes
          grep -E "error:|warning:|-->|" clippy_output.txt | sed 's/\x1B\[[0-9;]*[mK]//g' >> clippy_summary.md
          
          # Count actual errors and warnings
          ERROR_COUNT=$(grep -c "error:" clippy_output.txt || echo 0)
          WARNING_COUNT=$(grep -c "warning:" clippy_output.txt || echo 0)
          
          echo "" >> clippy_summary.md
          echo "## Summary" >> clippy_summary.md
          echo "* Errors: $ERROR_COUNT" >> clippy_summary.md
          echo "* Warnings: $WARNING_COUNT" >> clippy_summary.md
          echo "* Exit Code: $CLIPPY_EXIT_CODE (non-zero means Clippy found errors)" >> clippy_summary.md
          echo '```' >> clippy_summary.md
          
          if [ $CLIPPY_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Clippy found errors! Exit code: $CLIPPY_EXIT_CODE"
            cat clippy_summary.md
          else
            if [ $WARNING_COUNT -gt 0 ]; then
              echo "⚠️ Clippy found $WARNING_COUNT warnings, but no errors. See report for details."
            else
              echo "✅ Clippy is happy with your code!"
            fi
          fi
          
          # Store exit code for later steps
          echo "CLIPPY_EXIT_CODE=$CLIPPY_EXIT_CODE" >> $GITHUB_ENV
          echo "WARNING_COUNT=$WARNING_COUNT" >> $GITHUB_ENV
      
      - name: Comment PR with Clippy report
        if: github.event_name == 'pull_request' && (env.CLIPPY_EXIT_CODE != '0' || env.WARNING_COUNT != '0')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('clippy_summary.md', 'utf8');
            const warningCount = process.env.WARNING_COUNT;
            const exitCode = process.env.CLIPPY_EXIT_CODE;
            
            let title = "## Clippy Found Issues";
            if (exitCode === '0' && warningCount !== '0') {
              title = "## Clippy Found Warnings (Build Passed)";
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${title}\n\n${report}`
            });

      - name: Fail if Clippy found errors (not just warnings)
        if: env.CLIPPY_EXIT_CODE != '0'
        run: |
          echo "::error::Clippy found errors. Please fix them before merging."
          exit 1 