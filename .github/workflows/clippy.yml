name: Clippy Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check if code compiles first
        id: compile_check
        continue-on-error: true
        run: |
          # First just check if the code compiles
          cargo check --all-targets --all-features > compile_output.txt 2>&1
          COMPILE_EXIT_CODE=$?
          
          # Use GitHub's newer output method
          echo "compile_exit_code=$COMPILE_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $COMPILE_EXIT_CODE -ne 0 ]; then
            echo "reason=compilation_error" >> $GITHUB_OUTPUT
            echo "⚠️ Code doesn't compile. Fix compilation errors first."
          else
            echo "✅ Code compiles successfully."
          fi
      
      - name: Generate Clippy report
        if: steps.compile_check.outputs.compile_exit_code == '0'
        id: clippy_check
        run: |
          # Turn off automatic exit on error
          set +e
          
          # Run clippy with specific allowed lints
          cargo clippy --all-targets --all-features --no-deps > clippy_output.txt 2>&1
          CLIPPY_EXIT_CODE=$?
          
          # Turn automatic exit on error back on
          set -e
          
          # Format the output to be more readable
          echo "## Clippy Report" > clippy_summary.md
          echo '```' >> clippy_summary.md
          
          # Save original output for context and debugging
          cat clippy_output.txt > clippy_full_report.txt
          
          # Extract error and warning lines and strip ANSI color codes
          grep -E "error:|warning:|-->|" clippy_output.txt | sed 's/\x1B\[[0-9;]*[mK]//g' >> clippy_summary.md || true
          
          # Count actual errors and warnings
          ERROR_COUNT=$(grep -c "error:" clippy_output.txt || echo 0)
          WARNING_COUNT=$(grep -c "warning:" clippy_output.txt || echo 0)
          
          echo "" >> clippy_summary.md
          echo "## Summary" >> clippy_summary.md
          echo "* Errors: $ERROR_COUNT" >> clippy_summary.md
          echo "* Warnings: $WARNING_COUNT" >> clippy_summary.md
          echo "* Exit Code: $CLIPPY_EXIT_CODE" >> clippy_summary.md
          echo '```' >> clippy_summary.md
          
          # Use GitHub's newer output method
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "clippy_exit_code=$CLIPPY_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Only treat compilation errors as failures, not linting warnings
          if [[ $ERROR_COUNT -gt 0 && $CLIPPY_EXIT_CODE -ne 0 ]]; then
            echo "reason=clippy_errors" >> $GITHUB_OUTPUT
            echo "⚠️ Clippy found errors! Exit code: $CLIPPY_EXIT_CODE"
            cat clippy_summary.md
          else
            if [ $WARNING_COUNT -gt 0 ]; then
              echo "⚠️ Clippy found $WARNING_COUNT warnings, but no errors. Build will pass."
            else
              echo "✅ Clippy is happy with your code!"
            fi
          fi
          
          # Make sure we let the workflow continue to comment on PR and report
          exit 0
      
      - name: Prepare compilation error report
        if: steps.compile_check.outputs.compile_exit_code != '0'
        run: |
          echo "## Compilation Failed" > clippy_summary.md
          echo '```' >> clippy_summary.md
          cat compile_output.txt | sed 's/\x1B\[[0-9;]*[mK]//g' >> clippy_summary.md
          echo '```' >> clippy_summary.md
          
          echo "### The code doesn't compile" >> clippy_summary.md
          echo "Fix the compilation errors before Clippy can analyze the code." >> clippy_summary.md
      
      - name: Comment PR with report
        if: |
          github.event_name == 'pull_request' && (
            steps.compile_check.outputs.compile_exit_code != '0' || 
            steps.clippy_check.outputs.warning_count != '0' || 
            steps.clippy_check.outputs.error_count != '0'
          )
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('clippy_summary.md', 'utf8');
            
            let reason = 'unknown';
            if ('${{ steps.compile_check.outputs.reason }}' !== '') {
              reason = '${{ steps.compile_check.outputs.reason }}';
            } else if ('${{ steps.clippy_check.outputs.reason }}' !== '') {
              reason = '${{ steps.clippy_check.outputs.reason }}';
            }
            
            const warningCount = '${{ steps.clippy_check.outputs.warning_count }}' || '0';
            const errorCount = '${{ steps.clippy_check.outputs.error_count }}' || '0';
            const clippy_exit_code = '${{ steps.clippy_check.outputs.clippy_exit_code }}' || '0';
            
            let title = "## Clippy Analysis Results";
            
            if (reason === 'compilation_error') {
              title = "## ❌ Compilation Failed";
            } else if (reason === 'clippy_errors' || (errorCount !== '0' && clippy_exit_code !== '0')) {
              title = "## ❌ Clippy Found Errors";
            } else if (warningCount !== '0' && errorCount === '0') {
              title = "## ⚠️ Clippy Found Warnings (Build Passed)";
            } else {
              title = "## ✅ Clippy Analysis Passed";
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${title}\n\n${report}`
            });

      - name: Determine overall success
        if: always()
        run: |
          # Check compilation status
          COMPILE_EXIT_CODE="${{ steps.compile_check.outputs.compile_exit_code }}"
          CLIPPY_REASON="${{ steps.clippy_check.outputs.reason }}"
          ERROR_COUNT="${{ steps.clippy_check.outputs.error_count }}"
          CLIPPY_EXIT_CODE="${{ steps.clippy_check.outputs.clippy_exit_code }}"
          
          echo "Compile exit code: $COMPILE_EXIT_CODE"
          echo "Clippy reason: $CLIPPY_REASON"
          echo "Error count: $ERROR_COUNT"
          echo "Clippy exit code: $CLIPPY_EXIT_CODE"
          
          if [[ "$COMPILE_EXIT_CODE" != "0" && "$COMPILE_EXIT_CODE" != "" ]]; then
            echo "::error::Compilation failed. Please fix the errors before proceeding."
            exit 1
          elif [[ "$CLIPPY_REASON" == "clippy_errors" || ( "$ERROR_COUNT" != "0" && "$ERROR_COUNT" != "" && "$CLIPPY_EXIT_CODE" != "0" ) ]]; then
            echo "::error::Clippy found errors. Please fix them before merging."
            exit 1
          else
            echo "::notice::Analysis completed successfully."
            exit 0
          fi 